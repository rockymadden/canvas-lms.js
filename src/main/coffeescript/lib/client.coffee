bilby = require('bilby')
httpClosure = require('./http')

clientClosure = (@baseUrl, @token) ->
  withSession: (f) ->
    http = httpClosure(baseUrl, token)

    f(Object.freeze(
      # Account functions.
      deleteAccountUser: bilby.bind(http.delete)(http, (i) -> "/api/v1/accounts/#{ i.account_id }/users/#{ i.user_id }")
      getAccount: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }")
      getAccountCourse: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id }/courses/#{ i.course_id }")
      getAccountCourses: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/courses")
      getAccountMigration: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id }/content_migrations/#{ i.migration_id }")
      getAccountMigrations: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/content_migrations")
      getAccountSubs: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/sub_accounts")
      getAccountUsers: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/users")
      getAccounts: bilby.bind(http.get)(http, (-> '/api/v1/accounts'), null)
      postAccountCourse: bilby.bind(http.post)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/courses")
      postAccountMigration: bilby.bind(http.post)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/content_migrations")
      postAccountSub: bilby.bind(http.post)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/sub_accounts")
      postAccountUser: bilby.bind(http.post)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/users")
      putAccount: bilby.bind(http.put)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }")
      putAccountMigration: bilby.bind(http.put)(http, (i) -> "/api/v1/accounts/#{ i.account_id }/content_migrations/#{ i.migration_id }")
      putAccountUsersMerge: bilby.bind(http.put)(http, (i) -> "/api/v1/users/#{ i.user_id }/merge_into/accounts/#{ i.destination_account_id }/users/#{ i.destination_user_id }")

      # Course functions.
      deleteCourse: bilby.bind(http.delete)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }")
      deleteCourseEnrollment: bilby.bind(http.delete)(http, (i) -> "/api/v1/courses/#{ i.course_id }/enrollments/#{ i.enrollment_id }")
      getCourse: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }")
      getCourses: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/courses")
      getCourseEnrollments: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/enrollments")
      getCourseFiles: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/files")
      getCourseFilesQuota: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/files/quota")
      getCourseMigration: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id }/content_migrations/#{ i.migration_id }")
      getCourseMigrations: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/content_migrations")
      getCourseSettings: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/settings")
      getCourseTodos: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/todo")
      getCourseUser: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id }/users/#{ i.user_id }")
      getCourseUsers: bilby.bind(http.get)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/users")
      postCourse: bilby.bind(http.post)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/courses")
      postCourseEnrollment: bilby.bind(http.post)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/enrollments")
      postCourseFile: bilby.bind(http.postUrlEncoded)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/files")
      postCourseMigration: bilby.bind(http.post)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/content_migrations")
      putCourse: bilby.bind(http.put)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }")
      putCourseMigration: bilby.bind(http.put)(http, (i) -> "/api/v1/courses/#{ i.course_id }/content_migrations/#{ i.migration_id }")
      putCourseSettings: bilby.bind(http.put)(http, (i) -> "/api/v1/courses/#{ i.course_id || i }/settings")

      # File fucntions.
      deleteFile: bilby.bind(http.delete)(http, (i) -> "/api/v1/files/#{ i.file_id || i }")
      getFile: bilby.bind(http.get)(http, (i) -> "/api/v1/files/#{ i.file_id || i }")
      putFile: bilby.bind(http.put)(http, (i) -> "/api/v1/files/#{ i.file_id || i }")

      # Section functions.
      deleteSectionEnrollment: bilby.bind(http.delete)(http, (i) -> "/api/v1/sections/#{ i.section_id }/enrollments/#{ i.enrollment_id }")
      getSectionEnrollments: bilby.bind(http.get)(http, (i) -> "/api/v1/sections/#{ i.section_id || i }/enrollments")
      postSectionEnrollment: bilby.bind(http.post)(http, (i) -> "/api/v1/sections/#{ i.section_id || i }/enrollments")

      # Self functions.
      deleteSelfStreamItem: bilby.bind(http.delete)(http, (i) -> "/api/v1/users/self/activity_stream/#{ i.item_id || i }")
      deleteSelfStreamItems: bilby.bind(http.delete)(http, (-> '/api/v1/users/self/activity_stream'), null)
      getSelfCourses: bilby.bind(http.get)(http, (-> '/api/v1/courses'), null)
      getSelfEvents: bilby.bind(http.get)(http, (-> '/api/v1/users/self/upcoming_events'), null)
      getSelfStreamItems: bilby.bind(http.get)(http, (-> '/api/v1/users/self/activity_stream'), null)
      getSelfStreamItemsSummary: bilby.bind(http.get)(http, (-> '/api/v1/users/self/activity_stream/summary'), null)
      getSelfTodos: bilby.bind(http.get)(http, (-> '/api/v1/users/self/todo'), null)
      postSelfFile: bilby.bind(http.postUrlEncoded)(http, (-> '/api/v1/users/self/files'), null)

      # User functions.
      deleteUser: bilby.bind(http.delete)(http, (i) -> "/api/v1/accounts/#{ i.account_id }/users/#{ i.user_id }")
      deleteUserCustom: bilby.bind(http.delete)(http, (i) -> "/api/v1/users/#{ i.user_id } /custom_data/#{ i.scope }")
      getUser: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/profile")
      getUserAvatars: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/avatars")
      getUserCustom: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id }/custom_data/#{ i.scope }")
      getUserEnrollments: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/enrollments")
      getUserFiles: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/files")
      getUserFilesQuota: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/files/quota")
      getUserLogins: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/logins")
      getUserMigration: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id }/content_migrations/#{ i.migration_id }")
      getUserMigrations: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/content_migrations")
      getUserPageViews: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/page_views")
      getUserProfile: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/profile")
      getUserSettings: bilby.bind(http.get)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/settings")
      getUsers: bilby.bind(http.get)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/users")
      postUser: bilby.bind(http.post)(http, (i) -> "/api/v1/accounts/#{ i.account_id || i }/users")
      postUserFile: bilby.bind(http.postUrlEncoded)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/files")
      postUserMigration: bilby.bind(http.post)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/content_migrations")
      putUser: bilby.bind(http.put)(http, (i) -> "/api/v1/users/#{ i.user_id || i }")
      putUserCustom: bilby.bind(http.put)(http, (i) -> "/api/v1/users/#{ i.user_id } /custom_data/#{ i.scope }")
      putUserMigration: bilby.bind(http.put)(http, (i) -> "/api/v1/users/#{ i.user_id }/content_migrations/#{ i.migration_id }")
      putUserSettings: bilby.bind(http.put)(http, (i) -> "/api/v1/users/#{ i.user_id || i }/settings")
      putUsersMerge: bilby.bind(http.put)(http, (i) -> "/api/v1/users/#{ i.user_id }/merge_into/#{ i.destination_user_id }")
    ))

module.exports = Object.freeze(clientClosure)
